ENV['VAGRANT_NO_PARALLEL'] = ENV['E2E_STANDUP_PARALLEL'] ? nil : 'no'
NODE_ROLES = (ENV['E2E_NODE_ROLES'] ||
["server-0", "linux-agent-0", "windows-agent-0" ])
NODE_BOXES = (ENV['E2E_NODE_BOXES'] ||
['bento/ubuntu-24.04', 'bento/ubuntu-24.04', 'jborean93/WindowsServer2022'])
GITHUB_BRANCH = (ENV['E2E_GITHUB_BRANCH'] || "master")
RELEASE_VERSION = (ENV['E2E_RELEASE_VERSION'] || "")
NODE_CPUS = (ENV['E2E_NODE_CPUS'] || 2).to_i
NODE_MEMORY = (ENV['E2E_NODE_MEMORY'] || 3072).to_i
CNI = (ENV['E2E_CNI'] || "calico")
# Virtualbox >= 6.1.28 require `/etc/vbox/network.conf` for expanded private networks 
NETWORK_PREFIX = "10.10.10"
install_type = ""

def provision(vm, role, role_num, node_num)
  vm.box = NODE_BOXES[node_num]
  vm.hostname = role
  # An expanded netmask is required to allow VM<-->VM communication, virtualbox defaults to /32
  node_ip = "#{NETWORK_PREFIX}.#{100+node_num}"
  vm.network "private_network", ip: node_ip, netmask: "255.255.255.0"

  vagrant_defaults = '../vagrantdefaults.rb'
  load vagrant_defaults if File.exist?(vagrant_defaults)

  defaultOSConfigure(vm)
 
  if role.include?("windows")
    vm.provision "shell", path: "../scripts/install-bgp.ps1"
    if RELEASE_VERSION == "skip"
      install_type = "-ArtifactPath 'C:\tmp'" 
    elsif !RELEASE_VERSION.empty?
      install_type = "-Version #{RELEASE_VERSION}"
    else 
      vm.provision "shell", path: "../scripts/latest_commit.ps1", args: [GITHUB_BRANCH, "./rke2_commits.txt"]
      install_type = "-Commit (Get-Content -TotalCount 1 ./rke2_commits.txt)"
    end
  else
    install_type = getInstallType(vm, RELEASE_VERSION, GITHUB_BRANCH)
    vm.provision "Create Calico Manifest", type: "shell", path: "../scripts/calico_manifest.sh", args: [ "#{NETWORK_PREFIX}.1" ]
  end

  if role.include?("server") && role_num == 0
    vm.provision :rke2, run: 'once' do |rke2|
      rke2.env = %W[INSTALL_RKE2_TYPE=server #{install_type}]
      rke2.config_mode = '0644' # side-step https://github.com/k3s-io/k3s/issues/4321
      rke2.config = <<~YAML
        write-kubeconfig-mode: '0644'
        node-external-ip: #{NETWORK_PREFIX}.100
        node-ip: #{NETWORK_PREFIX}.100
        token: vagrant-rke2
        cni: #{CNI}
      YAML
    end
    vm.provision "Install sonobuoy", type: "shell", path: "../scripts/install_sonobuoy.sh"
  elsif role.include?("server") && role_num != 0
    vm.provision :rke2, run: 'once' do |rke2|
      rke2.env = %W[INSTALL_RKE2_TYPE=server #{install_type}]
      rke2.config_mode = '0644' # side-step https://github.com/k3s-io/k3s/issues/4321
      rke2.config = <<~YAML
        write-kubeconfig-mode: '0644'
        node-external-ip: #{node_ip}
        node-ip: #{node_ip}
        server: https://#{NETWORK_PREFIX}.100:9345
        token: vagrant-rke2
        cni: #{CNI}
      YAML
    end
  end
  if role.include?("linux-agent")
    vm.provision :rke2, run: 'once' do |rke2|
      rke2.env = %W[INSTALL_RKE2_TYPE=agent #{install_type}]
      rke2.config_mode = '0644' # side-step https://github.com/k3s-io/k3s/issues/4321
      rke2.install_path = false
      rke2.config = <<~YAML
        write-kubeconfig-mode: '0644'
        node-external-ip: #{node_ip}
        node-ip: #{node_ip}
        server: https://#{NETWORK_PREFIX}.100:9345
        token: vagrant-rke2
      YAML
    end
  end
  if role.include?("windows-agent")
    if !vm.box.match?(/Windows.*2022/) && !vm.box.match?(/Windows.*2019/)
      puts "invalid box: " + vm.box + " found for windows agent"
      abort
    end

    # For Windows GUI on virtualbox
    # vm.provider "virtualbox" do |v|
      # v.gui = true
      # v.customize ["modifyvm", :id, "--vram", 128]
      # v.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
      # v.customize ["modifyvm", :id, "--accelerate3d", "on"]
      # v.customize ["modifyvm", :id, "--accelerate2dvideo", "on"]
    # end
    # If using libvirt, use virt-viewer for GUI after bring up the node
    vm.provision :rke2, run: 'once' do |rke2|
      rke2.env = install_type
      rke2.config_mode = '0644' # side-step https://github.com/k3s-io/k3s/issues/4321
      # rke2.skip_start = true
      rke2.config = <<~YAML
        node-external-ip: #{node_ip}
        node-ip: #{node_ip}
        server: https://#{NETWORK_PREFIX}.100:9345
        token: vagrant-rke2
      YAML
    end
  end
end

Vagrant.configure("2") do |config|
  config.vagrant.plugins = ["vagrant-rke2", "vagrant-reload"]
  # For windows, just use the password not the private key
  config.ssh.password    = "vagrant"
  # Default provider is libvirt, virtualbox is only provided as a backup
  config.vm.provider "libvirt" do |v|
    v.cpus = NODE_CPUS
    v.memory = NODE_MEMORY
  end
  config.vm.provider "virtualbox" do |v|
    v.cpus = NODE_CPUS
    v.memory = NODE_MEMORY
    v.linked_clone = false
  end

  if NODE_ROLES.kind_of?(String)
    NODE_ROLES = NODE_ROLES.split(" ", -1)
  end
  if NODE_BOXES.kind_of?(String)
    NODE_BOXES = NODE_BOXES.split(" ", -1)
  end

  NODE_ROLES.each_with_index do |name, i|
    config.vm.define name do |node|
      role_num = name.split("-", -1).pop.to_i
      provision(node.vm, name, role_num, i)
    end
  end
end
