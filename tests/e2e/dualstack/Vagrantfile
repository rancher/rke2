ENV['VAGRANT_NO_PARALLEL'] = 'no'
NODE_ROLES = (ENV['E2E_NODE_ROLES'] ||
  ["server-0", "server-1", "server-2", "agent-0" ])
NODE_BOXES = (ENV['E2E_NODE_BOXES'] ||
  ['generic/ubuntu2004', 'generic/ubuntu2004', 'generic/ubuntu2004', 'generic/ubuntu2004'])
GITHUB_BRANCH = (ENV['E2E_GITHUB_BRANCH'] || "master")
RELEASE_VERSION = (ENV['E2E_RELEASE_VERSION'] || "")
NODE_CPUS = (ENV['E2E_NODE_CPUS'] || 2).to_i
NODE_MEMORY = (ENV['E2E_NODE_MEMORY'] || 3072).to_i
CNI = (ENV['E2E_CNI'] || "canal") # canal, cilium and calico supported
NETWORK4_PREFIX = "10.10.10"
NETWORK6_PREFIX = "fd11:decf:c0ff:ee"
install_type = ""

def provision(vm, roles, role_num, node_num)
  vm.box = NODE_BOXES[node_num]
  vm.hostname = "#{roles[0]}-#{role_num}"
  node_ip4 = "#{NETWORK4_PREFIX}.#{100+node_num}"
  node_ip6 = "#{NETWORK6_PREFIX}::#{10+node_num}"
  node_ip6_gw = "#{NETWORK6_PREFIX}::1"
  # Only works with libvirt, which allows IPv4 + IPv6 on a single network/interface
  vm.network "private_network", 
    :ip => node_ip4,
    :netmask => "255.255.255.0",
    :libvirt__dhcp_enabled => false,
    :libvirt__forward_mode => "none",
    :libvirt__guest_ipv6 => "yes",
    :libvirt__ipv6_address => "#{NETWORK6_PREFIX}::1",
    :libvirt__ipv6_prefix => "64"
    
  vagrant_defaults = File.exists?("./vagrantdefaults.rb") ? "./vagrantdefaults.rb" : "../vagrantdefaults.rb"
  load vagrant_defaults
  
  defaultOSConfigure(vm)
  
  scripts_location = Dir.exists?("./scripts") ? "./scripts" : "../scripts" 
  vm.provision "IPv6 Setup", type: "shell", path: scripts_location + "/ipv6.sh", args: [node_ip4, node_ip6, node_ip6_gw, CNI, vm.box]
  
  install_type = getInstallType(vm, RELEASE_VERSION, GITHUB_BRANCH)
  vm.provision "Ping Check", type: "shell", inline: "ping -4 -c 2 rke2.io"
  
  if roles.include?("server") && role_num == 0
    vm.provision :rke2, run: 'once' do |rke2|
      rke2.env = %W[INSTALL_RKE2_TYPE=server #{install_type}]
      rke2.config_mode = '0644' # side-step https://github.com/k3s-io/k3s/issues/4321
      rke2.config = <<~YAML
        write-kubeconfig-mode: '0644'
        node-external-ip: #{node_ip4},#{node_ip6}
        node-ip: #{node_ip4},#{node_ip6}
        token: vagrant-rke2
        cluster-cidr: 10.42.0.0/16,2001:cafe:42:0::/56
        service-cidr: 10.43.0.0/16,2001:cafe:43:0::/112
        bind-address: #{NETWORK4_PREFIX}.100
        cni: #{CNI}
        kubelet-arg: "--node-ip=0.0.0.0" # Workaround for https://github.com/kubernetes/kubernetes/issues/111695
      YAML
    end
  elsif roles.include?("server") && role_num != 0
    vm.provision :rke2, run: 'once' do |rke2|
      rke2.env = %W[INSTALL_RKE2_TYPE=server #{install_type}]
      rke2.config_mode = '0644' # side-step https://github.com/k3s-io/k3s/issues/4321
      rke2.config = <<~YAML
        write-kubeconfig-mode: '0644'
        node-external-ip: #{node_ip4},#{node_ip6}
        node-ip: #{node_ip4},#{node_ip6}
        server: https://#{NETWORK4_PREFIX}.100:9345
        token: vagrant-rke2
        cluster-cidr: 10.42.0.0/16,2001:cafe:42:0::/56
        service-cidr: 10.43.0.0/16,2001:cafe:43:0::/112
        cni: #{CNI}
        kubelet-arg: "--node-ip=0.0.0.0" # Workaround for https://github.com/kubernetes/kubernetes/issues/111695
      YAML
    end
  end
  if roles.include?("agent")
    vm.provision :rke2, run: 'once' do |rke2|
      rke2.env = %W[INSTALL_RKE2_TYPE=agent #{install_type}]
      rke2.config_mode = '0644' # side-step https://github.com/k3s-io/k3s/issues/4321
      rke2.install_path = false
      rke2.config = <<~YAML
        write-kubeconfig-mode: '0644'
        node-external-ip: #{node_ip4},#{node_ip6}
        node-ip: #{node_ip4},#{node_ip6}
        server: https://#{NETWORK4_PREFIX}.100:9345
        token: vagrant-rke2
        cni: #{CNI}
        kubelet-arg: "--node-ip=0.0.0.0" # Workaround for https://github.com/kubernetes/kubernetes/issues/111695
      YAML
    end
  end
end

Vagrant.configure("2") do |config|
  config.vagrant.plugins = ["vagrant-rke2", "vagrant-reload", "vagrant-libvirt"]
  config.vm.provider "libvirt" do |v|
    v.cpus = NODE_CPUS
    v.memory = NODE_MEMORY
  end
  
  if NODE_ROLES.kind_of?(String)
    NODE_ROLES = NODE_ROLES.split(" ", -1)
  end
  if NODE_BOXES.kind_of?(String)
    NODE_BOXES = NODE_BOXES.split(" ", -1)
  end

  # Must iterate on the index, vagrant does not understand iterating 
  # over the node roles themselves
  NODE_ROLES.length.times do |i|
    name = NODE_ROLES[i]
    config.vm.define name do |node|
      roles = name.split("-", -1)
      role_num = roles.pop.to_i
      provision(node.vm, roles, role_num, i)
    end
  end
end
