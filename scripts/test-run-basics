#!/bin/bash

calico_services=(
    tigera-operator
    calico-node
)

canal_services=(
    kube-flannel
    calico-node
)

echo "The CNI is $RKE2_CNI"

case $RKE2_CNI in
  calico)
    cni_services=${calico_services[@]}
    ;;
  canal)
    cni_services=${canal_services[@]}
    ;;
esac

all_services=(
    coredns
    etcd
    kube-apiserver
    kube-controller-manager
    kube-proxy
    kube-scheduler
    metrics-server
    rke2-ingress-nginx-controller
    ${cni_services[@]}
)

export NUM_SERVERS=1
export NUM_AGENTS=1
export WAIT_SERVICES="${all_services[@]}"

start-test() {
    #docker exec $(cat $TEST_DIR/servers/1/metadata/name) check-config || true
    verify-valid-versions $(cat $TEST_DIR/servers/1/metadata/name)
    verify-airgap-images $(cat $TEST_DIR/{servers,agents}/*/metadata/name)
}
export -f start-test

# -- check for changes to the airgap image list
# -- this currently only checks imags for the default CNI and charts
verify-airgap-images() {
    local expected="$TEST_DIR/logs/images-expected.txt"
    local actual="$TEST_DIR/logs/images-actual.txt"
    docker exec $(cat $TEST_DIR/servers/1/metadata/name) cat /images.txt | sort -u >$expected

    for name in $@; do
        docker exec $name crictl images -o json \
            | jq -r '.images[].repoTags[0] | select(. != null)'
    done | sort -u >$actual

    if ! diff $expected $actual; then
        echo '[ERROR] Failed airgap image check'
        return 1
    fi
    return 0
}
export -f verify-airgap-images

# --- create a basic cluster and check for valid versions
LABEL=BASICS run-test
